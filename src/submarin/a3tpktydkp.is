/// @ 0.19.0
// おくったリアクション
// Copyright (c) 2024 @elysion
// This script is licensed under the MIT
// https://opensource.org/licenses/mit-license.php

// description: 
// オプションとして『すべてのリアクションを対象』を選択した場合、かなり時間が必要になります。
// 8万リアクション以上は未検証。自己責任で。

let PLAY_URL = if exists THIS_URL THIS_URL else `{SERVER_URL}/play/a3tpktydkp`
let PLAY_TAG = "#おくったリアクション"

@Game() {
  // リアクションリスト
  var reaction_list = null
  // リアクション検索フラグ
  var fSearchAll = false
  // リアクション表示モード
  // 0: 両方
  // 1: カスタム絵文字のみ
  // 2: 絵文字のみ
  var reaction_disp_mode = 0

  // 初期化
  @init() {
    if USER_ID == null {
      render([
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: `$[x4 :destroying_hisubway:]`
            })
          ]
          align: "center"
        })
      ])
      Mk:dialog("エラー", [
        `ユーザーIDが見つかりませんでした`
        `$[x2 :kaikigenshou::bakuhatsu_sakananoonigiri:]`
        `ログインしてから遊んでみてねー👋`
      ].join(Str:lf), "error")
    } else {
      render([
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: [
                `集計するタイプを選択してください`
              ].join(Str:lf)
            })
            Ui:C:buttons({
              buttons: [
                {
                  text: "今日のリアクション"
                  onClick: @() {
                    fSearchAll = false
                    exec()
                  }
                  primary: true
                }
                {
                  text: "今までのリアクション"
                  onClick: @() {
                    fSearchAll = true
                    exec()
                  }
//                  primary: true
                }
              ]
            })
            Ui:C:mfm({
              text: [
                `<small>⚠️『今までのリアクション』を選択した場合、かなり時間が必要になります。</small>`
              ].join(Str:lf)
            })
          ]
          align: "center"
        })
      ])
    }
  }
  
  // リアクションの合計値を計算
  // param: reaction_data<arr>
  // return: <obj>
  @calcTotalReactions(reaction_data) {
    // 合計値を持つオブジェクトの作成
    let result = reaction_data.reduce(@(a, obj, i) {
      Obj:kvs(obj).reduce(@(a2, entry, i2) {
        let key = entry[0]
        let value = entry[1]
        if Obj:has(a2, key) {
          // キーが存在する場合は値を更新
          Obj:set(a2, key, Obj:get(a2, key) + value)
        } else {
          // キーが存在しない場合は新しいキーと値を追加
          Obj:set(a2, key, value)
        }
        return a2
      }, a)
      return a
    }, {})

    // 結果をキーと値のペアのリストに変換し、値が多い順にソート
    let entries = Obj:kvs(result).sort(@(a, b) {
      (b[1] - a[1])
    })

    // ソート済みのエントリを新しいオブジェクトに戻す
    let s_result = {}
    each (let entry, entries) {
      Obj:set(s_result, entry[0], entry[1])
    }

    return s_result
  }
  // 実行
  @exec() {
    let info_text = if fSearchAll `今まで` else `今日`
    
    let render_components = []

    render_components.push(
      Ui:C:mfm({
        text: [
          `$[x2 Now Loading]`
          `{info_text}のリアクション取得中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
        ].join(Str:lf)
      })
    )
    
    if fSearchAll {
      render_components.push(
        Ui:C:mfm({}, "reaction_data")
      )
    }

    render([
      Ui:C:container({
        children: render_components
        align: "center"
      })
    ])

    let since_date = if !fSearchAll Date:parse(`{Date:year()}-{Date:month().to_str().pad_start(2, "0")}-{Date:day().to_str().pad_start(2, "0")}T00:00:00.000+09:00`) else 1

// users/reactions
    var users_reactions = Mk:api("users/reactions", {
      userId: USER_ID,
      limit: 100,
      sinceDate: since_date
    })
    if fSearchAll {
      // 作業中UI更新
      Ui:get("reaction_data").update({
        text: `<small>{users_reactions.len}</small>`
      })
    }

    if Core:type(users_reactions) == "error" {
      render([
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: [
                `$[x4 :destroying_hisubway:]`
                `?[設定 -> プライバシー]({SERVER_URL}/settings/privacy)`
              ].join(Str:lf)
            })
          ]
          align: "center"
        })
      ])
      
      Mk:dialog(users_reactions.info.code, [
        users_reactions.info.message
        `$[x2 :kaikigenshou::bakuhatsu_sakananoonigiri:]`
        `?[設定 -> プライバシー]({SERVER_URL}/settings/privacy)から`
        `【リアクション一覧を公開する】をONにしてください`
      ].join(Str:lf), "error")
      
      return 0
    }

    if users_reactions.len == 0 {

      // 結果表示用
      let resultMfm = [
        `{info_text}おくったリアクションはありませんでした。`
      ].join(Str:lf)
      
      render([
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: [
                resultMfm
              ].join(Str:lf)
            })
          ]
          align: "center"
        })
      ])

      Mk:dialog("エラー", [
        `{info_text}おくったリアクションが見つかりませんでした`
        `$[x2 :nai::kanashii_sakananoonigiri:]`
        `たくさんリアクションしようね！`
      ].join(Str:lf), "error")
      
      return 0
    }

    if users_reactions.len == 100 {
      loop {
        let works = Mk:api("users/reactions", {
          userId: USER_ID,
          limit: 100,
          sinceId: users_reactions[users_reactions.len - 1].id
        })
        if works.len == 0 break

        users_reactions = users_reactions.concat(works)
        if fSearchAll {
          // 作業中UI更新
          Ui:get("reaction_data").update({
            text: `<small>{users_reactions.len}</small>`
          })
        }
        if works.len < 100 break
      }
    }
    
    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `リアクション情報走査中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])
//<:`users_reactions[0]: {users_reactions[0]}`
    
    // リアクションがあるノートのリアクションを取得
    let reactions = users_reactions.map(@(v) {
      let obj = {}
      Obj:set(obj, v.type, 1)
      obj
    })

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `リアクションの合計値を計算中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
              `<small>{reactions.len}件を対象に集計を行っています</small>`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])
      
    // リアクションの数を合計する
    reaction_list = calcTotalReactions(reactions)
//<:`reaction_list: {reaction_list}`

    main()
  }
  // メイン処理
  @main() {
  
    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `結果描画中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])

    let results = eval {
      match reaction_disp_mode {
        // カスタム絵文字のみにする
        1 => {
          Obj:kvs(reaction_list).filter(@(i) {
            i[0].index_of("@.:") != -1 && i[0].index_of("@") != -1
          }).map(@(v) {
            [ v[0].replace("@.:", ":"), v[1] ]
          })
        }
        // 絵文字のみにする
        2 => {
          Obj:kvs(reaction_list).filter(@(i) {
            i[0].index_of(":") == -1
          })
        }
        * => {
          Obj:kvs(reaction_list).filter(@(i) {
            i[0].index_of(":") == -1 || (i[0].index_of("@.:") != -1 && i[0].index_of("@") != -1)
          }).map(@(v) {
            [ v[0].replace("@.:", ":"), v[1] ]
          })
        }
      }
    }
//<:`results: {results}`

    let data_all = results.map(@(v) {
      `{v[0]}: {v[1]}`
    })
    // オブジェクト内のすべての数値の合計値
    let data_all_count = results.reduce(@(a, v, i) {
      if Core:type(v[1]) == "num" return a + v[1]
      return a
    }, 0)

// 10
    let data10 = results.slice(0, 10).map(@(v) {
      `{v[0]}: {v[1]}`
    })
    let data10_count = results.reduce(@(a, v, i) {
      if Core:type(v[1]) == "num" && i < 10 return a + v[1]
      return a
    }, 0)

// 50
    let data50 = results.slice(0, 50).map(@(v) {
      `{v[0]}: {v[1]}`
    })
    let data50_count = results.reduce(@(a, v, i) {
      if Core:type(v[1]) == "num" && i < 50 return a + v[1]
      return a
    }, 0)

// 100
    let data100 = results.slice(0, 100).map(@(v) {
      `{v[0]}: {v[1]}`
    })
    let data100_count = results.reduce(@(a, v, i) {
      if Core:type(v[1]) == "num" && i < 100 return a + v[1]
      return a
    }, 0)

    let info_text = if fSearchAll `今まで` else `今日`

    // 結果表示用
    let resultMfm = [
      `{info_text}おくったリアクションは`
      `総数: {data_all_count}`
      `種類: {data_all.len}`
      data_all.join(", ")
    ].join(Str:lf)

    // 投稿用テキスト
    let postText = [
      `{info_text}おくったリアクションは`
      `総数: {data_all_count}`
      `種類: {data_all.len}`
      data_all.join(", ")
    ]
    if reaction_disp_mode == 1 postText.push(`<small>カスタム絵文字のみ</small>`)
    if reaction_disp_mode == 2 postText.push(`<small>絵文字のみ</small>`)

// 10
    let postText10 = [
      `{info_text}おくったリアクションは`
      `総数: {data_all_count}`
      `種類: {data10.len}`
      data10.join(", ")
    ]
    if data_all.len > 10 postText10.push(`<small>⚠️上位10種まで表示</small>`)
    if reaction_disp_mode == 1 postText10.push(`<small>カスタム絵文字のみ</small>`)
    if reaction_disp_mode == 2 postText10.push(`<small>絵文字のみ</small>`)

// 50
    let postText50 = [
      `{info_text}おくったリアクションは`
      `総数: {data_all_count}`
      `種類: {data50.len}`
      data50.join(", ")
    ]
    if data_all.len > 50 postText50.push(`<small>⚠️上位50種まで表示</small>`)
    if reaction_disp_mode == 1 postText50.push(`<small>カスタム絵文字のみ</small>`)
    if reaction_disp_mode == 2 postText50.push(`<small>絵文字のみ</small>`)

// 100
    let postText100 = [
      `{info_text}おくったリアクションは`
      `総数: {data_all_count}`
      `種類: {data_all.len}`
      data100.join(", ")
    ]
    if data_all.len > 100 postText100.push(`<small>⚠️上位100種まで表示</small>`)
    if reaction_disp_mode == 1 postText100.push(`<small>カスタム絵文字のみ</small>`)
    if reaction_disp_mode == 2 postText100.push(`<small>絵文字のみ</small>`)

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              resultMfm
            ].join(Str:lf)
          })
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: [
                `<center>`
                postText.join(Str:lf)
                PLAY_URL
                PLAY_TAG
                `</center>`
              ].join(Str:lf)
            }
            primary: true
            rounded: true
          })
          Ui:C:mfm({
            text: "<small>⚠️文字数オーバーしている場合は下部にある投稿オプションをご利用ください</small>"
          })
        ]
        align: "center"
      })
      Ui:C:container({
        children: [
          Ui:C:folder({
            children: [
              Ui:C:container({
                children: [
                  Ui:C:postFormButton({
                    text: "投稿する(上位10種まで)"
                    form: {
                      text: [
                        `<center>`
                        postText10.join(Str:lf)
                        PLAY_URL
                        PLAY_TAG
                        `</center>`
                      ].join(Str:lf)
                    }
                    primary: true
                    rounded: true
                  })
                  Ui:C:postFormButton({
                    text: "投稿する(上位50種まで)"
                    form: {
                      text: [
                        `<center>`
                        postText50.join(Str:lf)
                        PLAY_URL
                        PLAY_TAG
                        `</center>`
                      ].join(Str:lf)
                    }
                    primary: true
                    rounded: true
                  })
                  Ui:C:postFormButton({
                    text: "投稿する(上位100種まで)"
                    form: {
                      text: [
                        `<center>`
                        postText100.join(Str:lf)
                        PLAY_URL
                        PLAY_TAG
                        `</center>`
                      ].join(Str:lf)
                    }
                    primary: true
                    rounded: true
                  })
                ]
              })
            ]
            title: "投稿オプション"
            opened: true
          })
          Ui:C:folder({
            children: [
              Ui:C:container({
                children: [
                  Ui:C:button({
                    onClick: @() {
                      reaction_disp_mode = 1
                      main()
                    }
                    text: "カスタム絵文字のみを表示"
                  })
                  Ui:C:button({
                    onClick: @() {
                      reaction_disp_mode = 2
                      main()
                    }
                    text: "絵文字のみを表示"
                  })
                  Ui:C:button({
                    onClick: @() {
                      reaction_disp_mode = 0
                      main()
                    }
                    text: "両方を表示"
                  })
                ]
                padding: 5
              })
            ]
            title: "リアクション表示設定"
            opened: true
          })
        ]
        align: "center"
      })
    ])
  }
  @render(components) {
    Ui:render(components)
  }
  init()
}
Game()
