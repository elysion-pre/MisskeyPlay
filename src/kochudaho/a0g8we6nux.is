/// @ 0.19.0
// 口金ついてますよ
// Copyright (c) 2024 @elysion
// This script is licensed under the MIT
// https://opensource.org/licenses/mit-license.php

let PLAY_NAME = "口金ついてますよ"
let PLAY_URL = if exists THIS_URL THIS_URL else `{SERVER_URL}/play/a0g8we6nux`
let PLAY_TAG = "#KUCHIKIN"
let PLAY_ID = if exists THIS_ID THIS_ID else PLAY_NAME

let random = eval {
  let id = if exists USER_ID USER_ID else Util:uuid()
  // シードが「PLAY ID+ユーザーID+今日の日付」である乱数生成器を用意
//  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}`)
  // シードが「PLAY ID+ユーザーID+ミリ秒」である乱数生成器を用意
  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}-{Date:minute()}-{Date:second()}-{Date:millisecond()}`)
}

// 除外する絵文字のカテゴリ
// pagesのjsonデータ読み込み
// https://{SERVER_URL}/@elysion/pages/ignore_emoji_data
let IGNORE_EMOJI_LIST = eval {
  var data = null
  let pages_data = Mk:api("pages/show", {
    name: "ignore_emoji_data"
    username: "elysion"
  })
  if (Core:type(pages_data) == "error") {
    data = { category: [ "TEXT", "TEXT_Submarin", "さくせん", "未分類", null ] }
  } else {
    data = Json:parse(pages_data.content[0].text)
  }
  data
}

@EmojiManager() {
  let this = {
    obj: {}
    categories: []
    // コンストラクタ
    constructor: @() {
      // 除外カテゴリ以外の絵文字抽出
      this.obj = CUSTOM_EMOJIS.filter(@(emoji) {
        !IGNORE_EMOJI_LIST.category.incl(emoji.category)
      })
      // カテゴリー抽出
      var prev_category = ""
      for (let i = 0, (this.obj.len - 1)) {
        if (prev_category != this.obj[i].category) {
          this.categories.push(this.obj[i].category)
        }
        prev_category = this.obj[i].category
      }
      this
    }
    // 絵文字カテゴリを返す
    // return: <arr>
    getCategories: @() {
      this.categories
    }
    // 絵文字を返す
    // param: name<str>
    // return: <arr>
    getEmoji: @(name) {
      this.obj.filter(@(v) {
        (v.name == name)
      }).pop()
    }
    // ランダムな絵文字を返す
    // return: <obj>
    getRandomEmoji: @() {
      this.obj[random(0, (this.obj.len - 1))]
    }
    // カテゴリー内の絵文字を返す
    // param: category<str>
    // return: <arr>
    getCategoryEmojis: @(category) {
      this.obj.filter(@(emoji) {
        emoji.category == category
      })
    }
    // 絵文字のエイリアスを返す
    // param: emoji<obj>
    // return: <arr>
    getEmojiAliases: @(emoji) {
      var aliases = []
      // 絵文字追加直後はaliasesに何も入っていない場合がある
      if (emoji["aliases"].len > 0) {
        // ""の場合
        if (emoji["aliases"][0] == "") {
          // emoji.nameを返す
          aliases.push(emoji["name"])
        } else {
          // エイリアスを返す
          aliases = emoji["aliases"]
        }
      } else {
        // emoji.nameを返す
        aliases.push(emoji["name"])
      }
      aliases
    }
    // 絵文字のエイリアスを返す(fRand = trueでランダム)
    // param: emoji<obj>
    // param: fRand<bool>
    // return: <str>
    getEmojiAliase: @(emoji, fRand) {
      var aliase = ""
      var aliases = this.getEmojiAliases(emoji)
      if (fRand) {
        // ランダムでエイリアスを返す
        aliase = aliases[random(0, (aliases.len - 1))]
      } else {
        // エイリアスの先頭を返す
        aliase = aliases[0]
      }
      aliase
    }
  }
  this.constructor()
}

@Game() {
  var emojiMng = null
  var category_emojis_components = []
  var emoji = null
  var kuchikin = {}

  // 初期化
  @init() {
    kuchikin = {
      posX: -3.5,
      posY: 0.0
    }

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `カスタム絵文字読み込み中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])

    emojiMng = EmojiManager()
    
    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `絵文字ボタン作成中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])

    // 絵文字ボタン作成
    category_emojis_components = []
    each (let category, emojiMng.getCategories()) {
      let category_emojis = emojiMng.getCategoryEmojis(category).map(@(v) {
        `$[clickable.ev={v.name} :{v.name}:]`
      })
      category_emojis_components.push(
        Ui:C:container({
          children: [
            Ui:C:folder({
              children: [
                Ui:C:mfm({
                  text: [
                    `<small>絵文字クリックで選択</small>`
                    category_emojis.join()
                  ].join(Str:lf)
                  onClickEv: @(e) {
                    emoji = e
                    main()
                  }
                })
              ]
              title: `{category}({category_emojis.len})`
              opened: false
            })
          ]
          align: "center"
          padding: 5
        })
      )
    }
    
    emoji = emojiMng.getRandomEmoji().name
    main()
  }
  // リプレイ
  @replay() {
    kuchikin = {
      posX: -3.5,
      posY: 0.0
    }
    emoji = emojiMng.getRandomEmoji().name
    main()
  }
  // メイン処理
  @main() {
    
    // 結果表示用
    let resultMfm  = [
      `$[position.x=1.5 $[position $[tada.speed=0s $[tada.speed=0s :{emoji}:]]]$[position.x={kuchikin.posX},y={kuchikin.posY} $[tada.speed=0s :kuchi_kintama:]]]`
    ].join(Str:lf)

    // 投稿用テキスト
    let postText = [
      `<center>`
//      PLAY_NAME
      resultMfm
      PLAY_TAG
      PLAY_URL
      `</center>`
    ].join(Str:lf)

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: resultMfm
          })
        ]
        align: "center"
      })
      Ui:C:container({
        children: [
          Ui:C:folder({
            children: [
              Ui:C:container({
                children: [
                  Ui:C:buttons({
                    buttons: [
                      {
                        text: "X: -0.1"
                        onClick: @() {
                          kuchikin.posX -= 0.1
                          if kuchikin.posX <= -7.5 kuchikin.posX = -7.5
                          main()
                        }
                      },
                      {
                        text: "X: +0.1"
                        onClick: @() {
                          kuchikin.posX += 0.1
                          if kuchikin.posX >= 0.5 kuchikin.posX = 0.5
                          main()
                        }
                      }
                    ]
                  })
                ]
                align: "center"
                padding: 5
              })
              Ui:C:container({
                children: [
                  Ui:C:buttons({
                    buttons: [
                      {
                        text: "Y: -0.1"
                        onClick: @() {
                          kuchikin.posY -= 0.1
                          if kuchikin.posY <= -2 kuchikin.posY = -2
                          main()
                        }
                      },
                      {
                        text: "Y: +0.1"
                        onClick: @() {
                          kuchikin.posY += 0.1
                          if kuchikin.posY >= 2 kuchikin.posY = 2
                          main()
                        }
                      }
                    ]
                  })
                  Ui:C:button({
                    text: "座標リセット"
                    onClick: @() {
                      kuchikin.posX = -3.5
                      kuchikin.posY = 0.0
                      main()
                    }
                  })
                ]
                align: "center"
              })
            ]
            title: "口金の座標"
          })
        ]
        align: "center"
      })
      Ui:C:container({
        children: [
          Ui:C:button({
            text: "もう一度"
            onClick: replay
          })
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: postText
            }
            primary: true
            rounded: true
          })
        ]
        align: "center"
      })
      Ui:C:container({
        children: [
          Ui:C:folder({
            children: category_emojis_components
            title: "素体を自分でカスタム絵文字の中から選ぶ"
            opened: true
          })
        ]
        align: "center"
      })
    ])
  }
  // 描画
  // param: components<arr>
  @render(components) {
    Ui:render(components)
  }
  init()
}
Game()
