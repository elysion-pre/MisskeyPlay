/// @ 0.19.0
// ｱﾂｱﾂの😚❤️KISS
// Copyright (c) 2024 @elysion
// This script is licensed under the MIT
// https://opensource.org/licenses/mit-license.php

let PLAY_NAME = "ｱﾂｱﾂの😚❤️KISS"
let PLAY_TAG = "#ore_no_atsu_atsu_kiss"
let PLAY_URL = if exists THIS_URL THIS_URL else `{SERVER_URL}/play/9rn1fjsb6j`

let RANK_EMOJI = [
  "🥇", "🥈", "🥉", "4️⃣", "5️⃣", "6️⃣", "7️⃣", "8️⃣", "9️⃣", "🔟"
]

@Game() {
  var input_id = ""
  var fBotExclusion = false
  var fLocalOnly = false
  // 初期化
  @init() {
    if USER_ID == null {
      render([
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: `$[x4 :GoBack:]`
            })
          ]
          align: "center"
        })
      ])
      Mk:dialog("エラー", [
        `ユーザーIDが見つかりませんでした`
        `$[x2 :fushiginakotomoarumondesuna::mimi_hate:]`
        `ログインしてから遊んでみてねー👋`
      ].join(Str:lf), "error")
    } else {
      input_id = USER_ID
      render([
        Ui:C:container({
          children: [
            Ui:C:textInput({
              onInput: @(text) {
                input_id = text
              }
              default: input_id
              label: "ユーザーID"
              caption: "⚠ユーザーID確認方法: プロフィール→rawタブ"
            })
          ]
        })
        Ui:C:folder({
          children: [
            Ui:C:switch({
              onChange: @(enabled) {
                fBotExclusion = enabled
              }
              default: false
              label: "bot除外"
              caption: "⚠️ONにするとbotは対象外"
            })
            Ui:C:switch({
              onChange: @(enabled) {
                fLocalOnly = enabled
              }
              default: false
              label: "ローカルユーザーのみ"
              caption: "⚠️ONにするとローカルユーザーのみが対象"
            })
          ]
          title: "オプション"
        })
        Ui:C:container({
          children: [
            Ui:C:button({
              onClick: main
              text: "確認する"
              primary: true
            })
          ]
          align: "center"
        })
      ])
    }
  }
  // メイン処理
  @main() {
    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `頻繁にリプライ(返信)をしているユーザーを取得中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
              `<small>最新の1000件のノートを対象に集計を行います</small>`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])

    // ユーザーが頻繁にリプライ(返信)を送信しているユーザーを取得します。
    // 最新の1000件のノートを対象に集計を行います。
    let replied_users = Mk:api("users/get-frequently-replied-users", {
      userId: input_id,
      limit: 100
    })
    
    var count = 0
    let ranking_list = []
    let not_ranked_list = []
    if replied_users.len > 0 {
      each (let user_data, replied_users) {
        // 凍結は除外
        if user_data.user.isSuspended continue
        // bot除外
        if fBotExclusion && user_data.user.isBot continue
        // 自身は除外
        if user_data.user.id == input_id continue
        // ローカルのみ
        if fLocalOnly && user_data.user.host != null continue

        // 1位から10位
        if count < 10 {
          if count == 0 {
            ranking_list.push(`$[jelly {RANK_EMOJI[count]}: ?[<plain>{if user_data.user.name == null user_data.user.username else user_data.user.name}</plain>]({SERVER_URL}/@{user_data.user.username}{if user_data.user.host != null `@{user_data.user.host}` else ""})]`)
          } else {
            ranking_list.push(`{RANK_EMOJI[count]}: ?[<plain>{if user_data.user.name == null user_data.user.username else user_data.user.name}</plain>]({SERVER_URL}/@{user_data.user.username}{if user_data.user.host != null `@{user_data.user.host}` else ""})`)
          }
          count += 1
        } else {
          // 11位以降
          not_ranked_list.push(`{count + 1}: ?[<plain>{if user_data.user.name == null user_data.user.username else user_data.user.name}</plain>]({SERVER_URL}/@{user_data.user.username}{if user_data.user.host != null `@{user_data.user.host}` else ""})`)
          count += 1
        } 
      }
      if fBotExclusion {
        if fLocalOnly {
          ranking_list.push("<small>bot除外, ローカルユーザーのみ</small>")
        } else {
          ranking_list.push("<small>bot除外</small>")
        }
      } else {
        if fLocalOnly {
          ranking_list.push("<small>ローカルユーザーのみ</small>")
        }
      }

      // 投稿用テキスト
      let postText = [
        `<plain>{if USER_NAME != null USER_NAME else USER_USERNAME}</plain>の{PLAY_NAME}は`
        ranking_list.join(Str:lf)
        PLAY_TAG
        PLAY_URL
      ].join(Str:lf)
      
      let render_components = []
      render_components.push(
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: ranking_list.join(Str:lf)
            })
          ]
        })
      )
      // 対象が自分なら投稿可能
      if input_id == USER_ID {
        render_components.push(
          Ui:C:container({
            children: [
              Ui:C:postFormButton({
                text: "投稿する"
                form: {
                  text: postText
                }
                primary: true
                rounded: true
              })
            ]
            align: "center"
          })
        )
      }
      render_components.push(
        Ui:C:container({
          children: [
            Ui:C:folder({
              children: [
                Ui:C:mfm({
                  text: not_ranked_list.join(Str:lf)
                })
              ]
              title: "11位以降のランキング"
            })
          ]
        })
      )
      render(render_components)
    } else {

      render([
        Ui:C:container({
          children: [
            Ui:C:mfm({
              text: `$[x4 :GoBack:]`
            })
          ]
          align: "center"
        })
      ])
      Mk:dialog("エラー", [
        "直近1000件のノート内にリプライ(返信)はありませんでした。"
        `$[x2 :kanashiiyo::mimi_hate:]`
        `たくさんリプライしてから遊んでみてねー👋`
      ].join(Str:lf), "error")
    }
  }
  @render(components) {
    Ui:render(components)
  }
  init()
}
Game()
