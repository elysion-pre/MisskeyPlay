/// @ 0.19.0
// 今日のおくりもの
// Copyright (c) 2024 @elysion
// This script is licensed under the MIT
// https://opensource.org/licenses/mit-license.php

let PLAY_URL = if exists THIS_URL THIS_URL else `{SERVER_URL}/play/`
let PLAY_TAG = "#A4U_GIFT"
let PLAY_ID = if exists THIS_ID THIS_ID else PLAY_URL

let random = eval {
  let id = if exists USER_ID USER_ID else Util:uuid()
  // シードが「PLAY ID+ユーザーID+今日の日付」である乱数生成器を用意
//  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}`)
  // シードが「PLAY ID+ユーザーID+時間」である乱数生成器を用意
//  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}-{Date:hour()}`)
  // シードが「PLAY ID+ユーザーID+ミリ秒」である乱数生成器を用意
  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}-{Date:minute()}-{Date:second()}-{Date:millisecond()}`)
}

// 除外する絵文字のカテゴリ
// pagesのjsonデータ読み込み
// https://{SERVER_URL}/@elysion/pages/ignore_emoji_data
let IGNORE_EMOJI_LIST = eval {
  var data = null
  let pages_data = Mk:api("pages/show", {
    name: "ignore_emoji_data"
    username: "elysion"
  })
  if (Core:type(pages_data) == "error") {
    data = {
      category: [
        null
      ]
    }
  } else {
    data = Json:parse(pages_data.content[0].text)
  }
  data
}

// 除外する絵文字のカテゴリ
// pagesのjsonデータ読み込み
// https://{SERVER_URL}/@elysion/pages/gift_data
let TWEMOJI_LIST = eval {
  var data = null
  let pages_data = Mk:api("pages/show", {
    name: "gift_data"
    username: "elysion"
  })
  if (Core:type(pages_data) == "error") {
    Core:abort([
      `pagesにデータが見つかりませんでした。`
      `{SERVER_URL}/@elysion/pages/gift_data`
      `プログラムを停止します。`
    ].join(Str:lf))
  } else {
    data = Json:parse(pages_data.content[0].text)
  }
  data
}

@EmojiManager() {
  let this = {
    obj: {}
    categories: []
    // コンストラクタ
    constructor: @() {
      // 除外カテゴリ以外の絵文字抽出
      this.obj = CUSTOM_EMOJIS.filter(@(emoji) {
        !IGNORE_EMOJI_LIST.category.incl(emoji.category)
      })
      // カテゴリー抽出
      var prev_category = ""
      for (let i = 0, (this.obj.len - 1)) {
        if (prev_category != this.obj[i].category) {
          this.categories.push(this.obj[i].category)
        }
        prev_category = this.obj[i].category
      }
      this
    }
    // 絵文字を返す
    // param: name<str>
    // return: <arr>
    getEmoji: @(name) {
      this.obj.filter(@(v) {
        (v.name == name)
      }).pop()
    }
    // ランダムな絵文字を返す
    // return: <obj>
    getRandomEmoji: @() {
      this.obj[random(0, (this.obj.len - 1))]
    }
    // カテゴリー内の絵文字を返す
    // param: category<str>
    // return: <arr>
    getCategoryEmojis: @(category) {
      this.obj.filter(@(emoji) {
        emoji.category == category
      })
    }
    // 絵文字のエイリアスを返す
    // param: emoji<obj>
    // return: <arr>
    getEmojiAliases: @(emoji) {
      var aliases = []
      // 絵文字追加直後はaliasesに何も入っていない場合がある
      if (emoji["aliases"].len > 0) {
        // ""の場合
        if (emoji["aliases"][0] == "") {
          // emoji.nameを返す
          aliases.push(emoji["name"])
        } else {
          // エイリアスを返す
          aliases = emoji["aliases"]
        }
      } else {
        // emoji.nameを返す
        aliases.push(emoji["name"])
      }
      aliases
    }
    // 絵文字のエイリアスを返す(fRand = trueでランダム)
    // param: emoji<obj>
    // param: fRand<bool>
    // return: <str>
    getEmojiAliase: @(emoji, fRand) {
      var aliase = ""
      var aliases = this.getEmojiAliases(emoji)
      if (fRand) {
        // ランダムでエイリアスを返す
        aliase = aliases[random(0, (aliases.len - 1))]
      } else {
        // エイリアスの先頭を返す
        aliase = aliases[0]
      }
      aliase
    }
  }
  this.constructor()
}

@Game() {
  var emojiMng = null

  // 初期化
  @init() {

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `カスタム絵文字読み込み中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])

    emojiMng = EmojiManager()

    main()
  }
  // メイン処理
  @main() {
    // 誕生日かどうかのフラグ
    var fHBD = false
    // カスタム絵文字かどうかのフラグ
    var fCustomEmoji = false
    // カスタム絵文字 or twemoji
    // 確率50%
    var gift = ""
    if (random(0, 100) >= 50) {
      gift = `:{emojiMng.getRandomEmoji().name}:`
      fCustomEmoji = true
    } else {
      if (random(0, 100) >= 50) {
        gift = TWEMOJI_LIST.twemoji_food_and_drink[random(0, (TWEMOJI_LIST.twemoji_food_and_drink.len - 1))]
      } else {
        gift = TWEMOJI_LIST.twemoji_object[random(0, (TWEMOJI_LIST.twemoji_object.len - 1))]
      }
    }

    let omanMfm = [
      `$[position.y=1.3 $[scale.x=0.5,y=0.5 ●]]`
      `$[position.y=1 $[scale.x=2.5,y=2.0 $[fg.color=888578 ▲]]]`
      `$[position.x=-1.5,y=0.3 $[scale.x=1.5,y=1.5 $[rotate.deg=75 く]]]$[position $[scale.x=4.0 $[rotate.deg=90 （]]]$[position.x=1.5,y=0.3 $[scale.x=1.5,y=1.5 $[rotate.deg=105 $[flip.v く]]]]`
      `$[rotate.deg=60 $[flip ✓]]　$[position.x=-0.4,y=0.7 $[scale.x=2.0 $[rotate.deg=30 ノ]]]$[position.y=0.5 $[scale **◯**]]$[position.y=0.5 $[scale **◯**]]$[position.x=0.4,y=0.7 $[scale.x=2.0 $[rotate.deg=-30 $[flip ノ]]]]　$[rotate.deg=-60 ✓]`
      `$[position.y=-0.5 $[rotate.deg=60 $[flip ✓]]]　　$[position.x=0.1,y=-1.05 $[scale.x=0.6,y=0.6 ●]]$[position.x=0.0,y=-1.05 $[scale.x=0.6,y=0.6 ●]]　　$[position.y=-0.5 $[rotate.deg=-60 ✓]]`
      `$[position.y=-1.2 く]　　$[position.x=0,y=-1.5 $[scale $[rotate.deg=-20 ⊂]]]$[position.x=-0,y=-1.5 $[scale $[rotate.deg=20 ⊃]]]　　$[position.y=-1.2 $[flip く]]`
      `$[position.y=-3.2 $[scale.x=0.4,y=0.4 **◯**]]`
      `　$[position.y=-3 $[rotate.deg=60 $[flip ✓]]]　　　　　　$[position.y=-3 $[rotate.deg=-60 ✓]]　`
      `$[position.x=0.2,y=-3.0 $[scale.x=2.0,y=2.0 $[rotate.deg=210 ✋]]]　$[position.x=-0.2,y=-3.0 $[scale.x=2.0,y=2.0 $[rotate.deg=150 $[flip ✋]]]]`
      `$[position.y=-5.5 $[scale.x=5.0,y=5.0 $[blur $[blur $[fg.color=cc8855 ●]]]]]`
    ].join(Str:lf)

    let titleMfm = eval {
      var mfm = "𝑷𝒓𝒆𝒔𝒆𝒏𝒕 𝒇𝒐𝒓 𝒚𝒐𝒖"
      let user = Mk:api("users/show", {
        userId: USER_ID
      })
      if Core:type(user) != "error" {
        if user.birthday != null {
          if (Date:month() == Date:month(Date:parse(user.birthday)) && Date:day() == Date:day(Date:parse(user.birthday))) {
            mfm = "𝑯𝒂𝒑𝒑𝒚 𝑩𝒊𝒓𝒕𝒉𝒅𝒂𝒚"
            fHBD = true
          }
        }
      }
      mfm
    }
    
    let giftMfm = eval {
      var mfm = ""
      if fHBD {
        mfm = `$[position.y=-6.5 $[scale.x=2.0,y=2.0 🎂]]`
      } else {
        if !fCustomEmoji {
          mfm = `$[position.y=-6.5 $[scale.x=2.0,y=2.0 {gift}]]`
        } else {
          mfm = `$[position.y=-6.5 $[scale.x=1.25,y=1.25 {gift}]]`
        }
      }
      mfm
    }
    
    let messageMfm = eval {
      var mfm = ""
      if fHBD {
        mfm = `{if USER_NAME != null USER_NAME else USER_USERNAME}さんお誕生日おめでとう🎁🎂🎉`
      } else {
        mfm = `今日は{gift}をもらったよ！`
      }
      mfm
    }

    // 結果表示用
    let resultMfm = [
      `$[x2 {titleMfm}]`
      omanMfm
      giftMfm
      messageMfm
    ].join(Str:lf)

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `<center>`
              resultMfm
              `</center>`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
      Ui:C:container({
        children: [
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: [
                `<center>`
                resultMfm
                PLAY_URL
                PLAY_TAG
                `</center>`
              ].join(Str:lf)
            }
            primary: true
            rounded: true
          })
        ]
        align: "center"
      })
    ])
  }
  // 描画
  // param: components<arr>
  @render(components) {
    Ui:render(components)
  }
  init()
}

Game()
