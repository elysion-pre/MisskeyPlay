/// @ 0.16.0
// あんにんやガチャ
// Copyright (c) 2024 @elysion
// License: MIT License
// https://github.com/elysion-pre/MisskeyPlay/blob/main/LICENSE

let PLAY_NAME = "あんにんやガチャ"
let TAG_NAME = `#あんにんやガチャ`

let name = "あんにんや"

let emoji_name = ":a_hiragana::n_hiragana::ni_hiragana::n_hiragana::ya_hiragana:"

// 過去の結果を保存しておくやつ
var results = []

// どれだけ巻き戻しているか
var cursor = 0

// カスタム絵文字モード
var enabledEmoji = true

// カスタム絵文字を返す
@convert_emoji(char) {
  match char {
    "あ" => return ":a_hiragana:"
    "ん" => return ":n_hiragana:"
    "に" => return ":ni_hiragana:"
    "や" => return ":ya_hiragana:"
  }
}

@do() {
	if (cursor != 0) {
		results = results.slice(0, (cursor + 1))
		cursor = 0
	}

	let chars = []
	for let i name.len {
		let r = Math:rnd(0, (name.len - 1))
		chars.push(name.pick(r))
	}
	var result = chars.join("")
	results.push(result)

  if (enabledEmoji) {
    let emoji = []
    each let char result.split("") {
      emoji.push(convert_emoji(char))
    }
    result = emoji.join("")
  }

  if (result == name || result == emoji_name) {
    result = `$[x2 $[sparkle {result}]]`
  }

	// UIを表示
	render(result)
}

@back() {
	cursor = cursor + 1
	var result = results[results.len - (cursor + 1)]
  if (enabledEmoji) {
    let emoji = []
    each let char result.split("") {
      emoji.push(convert_emoji(char))
    }
    result = emoji.join("")
  }

  if (result == name || result == emoji_name) {
    result = `$[x2 $[sparkle {result}]]`
  }

	render(result)
}

@forward() {
	cursor = cursor - 1
	let result = results[results.len - (cursor + 1)]
  if (enabledEmoji) {
    let emoji = []
    each let char result.split("") {
      emoji.push(convert_emoji(char))
    }
    result = emoji.join("")
  }

  if (result == name || result == emoji_name) {
    result = `$[x2 $[sparkle {result}]]`
  }

	render(result)
}

@render(result) {
	Ui:render([
    Ui:C:container({
      children: [
        Ui:C:mfm({
          text: `$[x2 {PLAY_NAME}]`
        })
      ]
      align: "center"
      hidden: false
    } "title_area")
		Ui:C:container({
			align: 'center'
			children: [
				Ui:C:mfm({ text: result })
				Ui:C:buttons({
					buttons: [{
						text: "←"
						disabled: !(results.len > 1 && (results.len - cursor) > 1)
						onClick: back
					} {
						text: "→"
						disabled: !(results.len > 1 && cursor > 0)
						onClick: forward
					} {
						text: "引き直す"
						onClick: do
					}]
				})
				Ui:C:postFormButton({
					text: "投稿する"
					rounded: true
					primary: true
					form: {
						text: [
              `<center>`
              result
              TAG_NAME
              THIS_URL
              `</center>`
            ].join(Str:lf)
					}
				})
        Ui:C:switch({
          onChange: @(enabled) {
            enabledEmoji = enabled
          }
          default: enabledEmoji
          label: "カスタム絵文字モード"
        })
			]
		})
	])
}

do()
