/// @ 0.19.0
// 俳句
// Copyright (c) 2024 @elysion
// License: MIT License
// https://github.com/elysion-pre/MisskeyPlay/blob/main/LICENSE

let PLAY_NAME = eval {
  match SERVER_URL {
    "https://submarin.online" => { "さんまぶり俳句" }
    "https://msk.kitazawa.me" => { "きたざわ俳句" }
    "https://misskey.stream" => { "Stream俳句" }
    * => { `{SERVER_URL}俳句` }
  }
}
let PLAY_TAG =  eval {
  match SERVER_URL {
    "https://submarin.online" => { "#SUBMARIN_HAIKU" }
    "https://msk.kitazawa.me" => { "#KITAZAWA_HAIKU" }
    "https://misskey.stream" => { "#STREAM_HAIKU" }
    * => ""
  }
}
let PLAY_URL = eval {
  if exists THIS_URL THIS_URL
  else {
    match SERVER_URL {
      "https://submarin.online" => { `{SERVER_URL}/play/9sd0zgazmq` }
      "https://msk.kitazawa.me" => { `{SERVER_URL}/play/9oi9xawja0` }
      "https://misskey.stream" => { `{SERVER_URL}/play/` }
      * => ""
    }
  }
}
let PLAY_ID = if exists THIS_ID THIS_ID else PLAY_NAME

let random = eval {
  let id = if exists USER_ID USER_ID else Util:uuid()
  // シードが「PLAY ID+ユーザーID+今日の日付」である乱数生成器を用意
//  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}`)
  // シードが「PLAY ID+ユーザーID+ミリ秒」である乱数生成器を用意
  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}-{Date:minute()}-{Date:second()}-{Date:millisecond()}`)
}

// 除外する絵文字のカテゴリ
// pagesのjsonデータ読み込み
// https://{SERVER_URL}/@elysion/pages/haiku_data
let HAIKU_DATA = eval {
  var data = null
  let pages_data = Mk:api("pages/show", {
    name: "haiku_data"
    username: "elysion"
  })
  if (Core:type(pages_data) == "error") {
    Core:abort([
      `pagesにデータが見つかりませんでした。`
      `{SERVER_URL}/@elysion/pages/haiku_data`
      `プログラムを停止します。`
    ].join(Str:lf))
  } else {
    data = Json:parse(pages_data.content[0].text)
  }
  data
}

// 値と重み付きの配列
// param: list<arr>
// return: item<num>
@choiceProbabilistic(list) {
  let total_weight = list.reduce(@(p, c) {
    { weight: p.weight + c.weight }
  }).weight

  return {
    pick: @() {
      var r = random() * total_weight
      var s = 0.0
      each (let l, list) {
        s += l.weight
        if (r < s) {
          return l.item
        }
      }
    }
  }
}

// 5音部分の重み付きリスト
// min: 5 max: 8
// weight: 重み
let WORD05_CHOICE_LIST = eval {
  match SERVER_URL {
    "https://submarin.online" => {
      choiceProbabilistic([
        { item: 5, weight: 95 },
        { item: 6, weight: 3 },
        { item: 7, weight: 2 },
        { item: 8, weight: 0 }
      ])
    }
    "https://msk.kitazawa.me" => {
      choiceProbabilistic([
        { item: 5, weight: 95 },
        { item: 6, weight: 2 },
        { item: 7, weight: 2 },
        { item: 8, weight: 1 }
      ])
    }
    "https://misskey.stream" => {
      choiceProbabilistic([
        { item: 5, weight: 95 },
        { item: 6, weight: 3 },
        { item: 7, weight: 2 },
        { item: 8, weight: 0 }
      ])
    }
    * => ""
  }
}

// 7音部分の重み付きリスト
// min: 7 max: 9
// weight: 重み
let WORD07_CHOICE_LIST = eval  {
  match SERVER_URL {
    "https://submarin.online" => {
      choiceProbabilistic([
        { item: 7, weight: 100 },
        { item: 8, weight: 0 },
        { item: 9, weight: 0 }
      ])
    }
    "https://msk.kitazawa.me" => {
      choiceProbabilistic([
        { item: 7, weight: 95 },
        { item: 8, weight: 3 },
        { item: 9, weight: 2 }
      ])
    }
    "https://misskey.stream" => {
      choiceProbabilistic([
        { item: 7, weight: 100 },
        { item: 8, weight: 0 },
        { item: 9, weight: 0 }
      ])
    }
    * => ""
  }
}

@Game() {

  // 初期化
  @init() {

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 Now Loading]`
              `カスタム絵文字読み込み中$[bounce .]$[bounce.delay=0.2s .]$[bounce.delay=0.4s .]`
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
    ])

    main()
  }
  // 指定された音数の文字列を返す
  // param: num<num>
  // return: <str>
  @getWord(num) {
    match num {
      2 => HAIKU_DATA.WORD2_EMOJIS[random(0, (HAIKU_DATA.WORD2_EMOJIS.len - 1))]
      3 => HAIKU_DATA.WORD3_EMOJIS[random(0, (HAIKU_DATA.WORD3_EMOJIS.len - 1))]
      4 => HAIKU_DATA.WORD4_EMOJIS[random(0, (HAIKU_DATA.WORD4_EMOJIS.len - 1))]
      5 => HAIKU_DATA.WORD5_EMOJIS[random(0, (HAIKU_DATA.WORD5_EMOJIS.len - 1))]
      6 => HAIKU_DATA.WORD6_EMOJIS[random(0, (HAIKU_DATA.WORD6_EMOJIS.len - 1))]
      7 => HAIKU_DATA.WORD7_EMOJIS[random(0, (HAIKU_DATA.WORD7_EMOJIS.len - 1))]
      8 => HAIKU_DATA.WORD8_EMOJIS[random(0, (HAIKU_DATA.WORD8_EMOJIS.len - 1))]
      9 => HAIKU_DATA.WORD9_EMOJIS[random(0, (HAIKU_DATA.WORD9_EMOJIS.len - 1))]
    }
  }
  // 指定された数を配列で返す
  // param: num<num>
  // return: num_array<arr>
  @generateNumArray(num) {
    var num_array = []
    var total = 0
    loop {
      var value = 0
      match num {
        5 => value = [2, 3, 5][random(0, ([2, 3, 5].len - 1))]
        6 => value = [2, 3, 4, 6][random(0, ([2, 3, 4, 6].len - 1))]
        7 => value = [2, 3, 4, 5, 7][random(0, ([2, 3, 4, 5, 7].len - 1))]
        8 => value = [2, 3, 4, 5, 6, 8][random(0, ([2, 3, 4, 5, 6, 8].len - 1))]
        9 => value = [2, 3, 4, 5, 6, 7, 9][random(0, ([2, 3, 4, 5, 6, 7, 9].len - 1))]
      }
      num_array.push(value)
    
      total = (total + value)
      if (total == num) {
        break
      }
      if (total > num) {
        if ((num - (total - value)) != 1) {
          total = (total - num_array.pop())
/*
          // これだと2だった場合必ず5になってしまう
          // 結果、223や232等が減る
          value = (num - total)
          ret.push(value)
          break
*/
        } else {
          // 詰み
          num_array = []
          total = 0
        }
      }
    }
    num_array
  }
  // もう一度
  @replay() {
    main()
  }
  // メイン処理
  @main() {

    // 575リストの作成
    // 5: 5〜8
    // 7: 7〜9
    // 5: 5〜8
    let lists = []
    var choice = ""
    // 字余りフラグ
    var fWordOver = false

    // 一度字余りしたら残りは字余りしないように
    choice = WORD05_CHOICE_LIST.pick()
    lists.push(choice)
    if (choice != 5) {
      fWordOver = true
      lists.push(7)
      lists.push(5)
    } else {
      choice = WORD07_CHOICE_LIST.pick()
      lists.push(choice)
      if (choice != 7) {
        fWordOver = true
        lists.push(5)
      } else {
        choice = WORD05_CHOICE_LIST.pick()
        lists.push(choice)
        if (choice != 5) {
          fWordOver = true
        }
      }
    }
    let results = []
    each (let list, lists) {
      // ex
      //  in: 5
      // out: [5] or [2, 3] or [3, 2]
      let numbers = generateNumArray(list)
      let result = []
      each (let num, numbers) {
        // ex
        //  in: [2, 3]
        // out: ["そか", "おしり"]
        let word = getWord(num)
        result.push(word)
      }
      results.push(result.join())
    }

    // 結果表示用
    let resultMfm = []
    resultMfm.push(results.join(Str:lf))

    let infoMfm = []
    if (!fWordOver) {
      infoMfm.push(`<small>({lists[0]}, {lists[1]}, {lists[2]})</small>`)
    } else {
      infoMfm.push(`<small>字余り({lists[0]}, {lists[1]}, {lists[2]})</small>`)
    }

    // 投稿用テキスト
    let postText = []
    if (fWordOver) {
      postText.push([
        `<center>`
        `$[x2 {resultMfm.join(Str:lf)}]`
        infoMfm.join(Str:lf)
        PLAY_TAG
        PLAY_URL
        `</center>`
      ].join(Str:lf))
    } else {
      postText.push([
        `<center>`
        `$[x2 {resultMfm.join(Str:lf)}]`
        PLAY_TAG
        PLAY_URL
        `</center>`
      ].join(Str:lf))
    }

    // 投稿用テキスト（コンパクト）
    let postCompactText = []
    if (fWordOver) {
      postCompactText.push([
        `<center>`
        resultMfm.join(Str:lf)
        infoMfm.join(Str:lf)
        PLAY_TAG
        `?[{PLAY_NAME}]({PLAY_URL})`
        `</center>`
      ].join(Str:lf))
    } else {
      postCompactText.push([
        `<center>`
        resultMfm.join(Str:lf)
        PLAY_TAG
        `?[{PLAY_NAME}]({PLAY_URL})`
        `</center>`
      ].join(Str:lf))
    }

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: [
              `$[x2 {resultMfm.join(Str:lf)}]`
              infoMfm.join(Str:lf)
            ].join(Str:lf)
          })
        ]
        align: "center"
      })
      Ui:C:container({
        children: [
          Ui:C:button({
            text: "もう一度"
            onClick: @() {
              replay()
            }
          })
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: postText.join(Str:lf)
            }
            primary: true
            rounded: true
          })
          Ui:C:postFormButton({
            text: "投稿する(コンパクトver)"
            form: {
              text: postCompactText.join(Str:lf)
            }
            primary: true
            rounded: true
          })
        ]
        align: "center"
      })
    ])
  }
  // 描画
  // param: components<arr>
  @render(components) {
    Ui:render(components)
  }
  init()
}
Game()
