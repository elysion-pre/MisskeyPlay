/// @ 0.19.0
// きたざわみすき
// 参考: Preset -> Shuffle
// Copyright (c) 2024 @elysion
// Released under the MIT license
// https://opensource.org/licenses/mit-license.php

let PLAY_URL = if exists THIS_URL THIS_URL else `{SERVER_URL}/play/9jwc5kdl75`
let PLAY_ID = if exists THIS_ID THIS_ID else PLAY_URL

let random = eval {
  let id = if exists USER_ID USER_ID else Util:uuid()
  // シードが「PLAY ID+ユーザーID+今日の日付」である乱数生成器を用意
//  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}`)
  // シードが「PLAY ID+ユーザーID+ミリ秒」である乱数生成器を用意
  Math:gen_rng(`{PLAY_ID}-{id}-{Date:year()}-{Date:month()}-{Date:day()}-{Date:minute()}-{Date:second()}-{Date:millisecond()}`)
}

@Game() {
  let word = "きたざわみすき"
  var results = []
  var cursor = 0

  // 実行
  @do() {
    if (cursor != 0) {
	  	results = results.slice(0, (cursor + 1))
		  cursor = 0
	  }
    let chars = []
	  for (let i, word.len) {
  		let r = random(0, (word.len - 1))
	  	chars.push(word.pick(r))
  	}
	  var resultMfm = ""
    if (chars.join("") == word) {
      resultMfm = `$[sparkle $[jelly $[tada.speed=0s $[fg.color=7ddc43 **{chars.join("")}**]]]]`
    } else {
      resultMfm = `$[tada.speed=0s $[fg.color=7ddc43 **{chars.join("")}**]]`
    }
    results.push(resultMfm)

    render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: resultMfm
          })
          Ui:C:buttons({
            buttons: [
              {
                text: "←"
                onClick: back
					    	disabled: !(results.len > 1 && (results.len - cursor) > 1)
              }, {
                text: "→"
                onClick: forward
					    	disabled: !(results.len > 1 && cursor > 0)
              }, {
                text: "引き直す"
                onClick: do
              }
            ]
          })
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: [
                `<center>`
                resultMfm
                PLAY_URL
                `</center>`
              ].join(Str:lf)
            }
            primary: true
            rounded: true
          })
        ]
        align: "center"
      })
    ])
  }
  // 戻る
  @back() {
  	cursor = cursor + 1
  	let resultMfm = results[results.len - (cursor + 1)]
  	render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: resultMfm
          })
          Ui:C:buttons({
            buttons: [
              {
                text: "←"
                onClick: back
					    	disabled: !(results.len > 1 && (results.len - cursor) > 1)
              }, {
                text: "→"
                onClick: forward
					    	disabled: !(results.len > 1 && cursor > 0)
              }, {
                text: "引き直す"
                onClick: do
              }
            ]
          })
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: [
                `<center>`
                resultMfm
                PLAY_URL
                `</center>`
              ].join(Str:lf)
            }
            primary: true
            rounded: true
          })
        ]
        align: "center"
      })
    ])
  }
  // 進む
  @forward() {
  	cursor = cursor - 1
  	let resultMfm = results[results.len - (cursor + 1)]
  	render([
      Ui:C:container({
        children: [
          Ui:C:mfm({
            text: resultMfm
          })
          Ui:C:buttons({
            buttons: [
              {
                text: "←"
                onClick: back
					    	disabled: !(results.len > 1 && (results.len - cursor) > 1)
              }, {
                text: "→"
                onClick: forward
					    	disabled: !(results.len > 1 && cursor > 0)
              }, {
                text: "引き直す"
                onClick: do
              }
            ]
          })
          Ui:C:postFormButton({
            text: "投稿する"
            form: {
              text: [
                `<center>`
                resultMfm
                PLAY_URL
                `</center>`
              ].join(Str:lf)
            }
            primary: true
            rounded: true
          })
        ]
        align: "center"
      })
    ])
  }
  // 描画
  // param: components<arr>
  @render(components) {
    Ui:render(components)
  }
  do()
}
Game()
